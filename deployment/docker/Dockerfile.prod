# =============================================================================
# nanoNAS Production Dockerfile
# Multi-stage build for minimal, secure production deployment
# =============================================================================

# =============================================================================
# Stage 1: Build Environment
# =============================================================================
FROM python:3.10-slim as builder

# Set build arguments
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION=1.0.0

# Add metadata
LABEL org.label-schema.build-date=$BUILD_DATE \
      org.label-schema.name="nanoNAS" \
      org.label-schema.description="Professional Neural Architecture Search Platform" \
      org.label-schema.url="https://github.com/Ratz-innovator/AutoMl-CodeGen" \
      org.label-schema.vcs-ref=$VCS_REF \
      org.label-schema.vcs-url="https://github.com/Ratz-innovator/AutoMl-CodeGen" \
      org.label-schema.vendor="AutoML Research Team" \
      org.label-schema.version=$VERSION \
      org.label-schema.schema-version="1.0"

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    git \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Install Poetry
ENV POETRY_HOME="/opt/poetry" \
    POETRY_CACHE_DIR=/opt/poetry/.cache \
    POETRY_VENV_IN_PROJECT=1 \
    POETRY_NO_INTERACTION=1 \
    POETRY_VERSION=1.6.1
RUN curl -sSL https://install.python-poetry.org | python3 -
ENV PATH="$POETRY_HOME/bin:$PATH"

# Set work directory
WORKDIR /app

# Copy poetry files
COPY pyproject.toml poetry.lock ./

# Configure poetry and install dependencies
RUN poetry config virtualenvs.create false \
    && poetry install --only=main --no-dev \
    && poetry cache clear pypi --all

# =============================================================================
# Stage 2: Runtime Environment
# =============================================================================
FROM python:3.10-slim as runtime

# Set runtime arguments
ARG USER_ID=1000
ARG GROUP_ID=1000
ARG USERNAME=nanonas

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    # Essential utilities
    curl \
    wget \
    # For GPU support (if needed)
    nvidia-smi \
    # For system monitoring
    htop \
    # Cleanup
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user
RUN groupadd -g $GROUP_ID $USERNAME \
    && useradd -u $USER_ID -g $GROUP_ID -m -s /bin/bash $USERNAME

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONPATH=/app \
    NANONAS_ENV=production \
    NANONAS_LOG_LEVEL=INFO \
    NANONAS_WORKERS=4 \
    NANONAS_HOST=0.0.0.0 \
    NANONAS_PORT=8000

# Set work directory
WORKDIR /app

# Copy Python dependencies from builder stage
COPY --from=builder /usr/local/lib/python3.10/site-packages /usr/local/lib/python3.10/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Copy application code
COPY nanonas/ ./nanonas/
COPY docs/ ./docs/
COPY examples/ ./examples/
COPY configs/ ./configs/
COPY scripts/ ./scripts/
COPY pyproject.toml ./

# Create necessary directories
RUN mkdir -p /app/data \
    /app/results \
    /app/logs \
    /app/cache \
    && chown -R $USERNAME:$USERNAME /app

# Install nanoNAS in development mode
RUN pip install -e .

# Copy configuration files
COPY deployment/config/production.yaml /app/config/production.yaml
COPY deployment/scripts/entrypoint.sh /app/entrypoint.sh
COPY deployment/scripts/healthcheck.sh /app/healthcheck.sh

# Make scripts executable
RUN chmod +x /app/entrypoint.sh /app/healthcheck.sh

# Switch to non-root user
USER $USERNAME

# Expose ports
EXPOSE 8000 8080 8888

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD /app/healthcheck.sh

# Set entrypoint
ENTRYPOINT ["/app/entrypoint.sh"]

# Default command
CMD ["server"]

# =============================================================================
# Stage 3: Development Environment (optional)
# =============================================================================
FROM runtime as development

# Switch back to root for development tools
USER root

# Install development dependencies
RUN apt-get update && apt-get install -y \
    vim \
    git \
    ssh \
    postgresql-client \
    redis-tools \
    && rm -rf /var/lib/apt/lists/*

# Install Python development dependencies
COPY --from=builder /opt/poetry /opt/poetry
ENV PATH="/opt/poetry/bin:$PATH"
RUN poetry install --with dev,docs

# Install Jupyter extensions
RUN pip install jupyter-lab \
    && jupyter labextension install @jupyter-widgets/jupyterlab-manager

# Switch back to non-root user
USER $USERNAME

# Expose additional ports for development
EXPOSE 8888 6006

# Development command
CMD ["development"]

# =============================================================================
# Build Instructions:
# =============================================================================
# Production build:
# docker build --target runtime -t nanonas:latest .
#
# Development build:
# docker build --target development -t nanonas:dev .
#
# With build args:
# docker build \
#   --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
#   --build-arg VCS_REF=$(git rev-parse --short HEAD) \
#   --build-arg VERSION=$(cat VERSION) \
#   -t nanonas:latest .
# ============================================================================= 