#!/usr/bin/env python3
"""
AutoML-CodeGen Demo
==================

A simple demonstration of the AutoML-CodeGen system.
Built by Ratnesh Singh - Self-taught AI Engineer
"""

import automl_codegen
from automl_codegen import (
    NeuralArchitectureSearch,
    CodeGenerator,
    SearchSpace,
    get_version
)

def main():
    print("🚀 AutoML-CodeGen Demo")
    print("=" * 50)
    print(f"Built by Ratnesh Singh | Version: {get_version()}")
    print()
    
    # 1. Create search space
    print("🔍 Creating neural architecture search space...")
    search_space = SearchSpace(
        task='image_classification',
        min_layers=6,
        max_layers=12,
        hardware_target='gpu'
    )
    print(f"   ✅ Search space created ({search_space.min_layers}-{search_space.max_layers} layers)")
    
    # 2. Sample an example architecture
    print("\n🏗️ Sampling example architecture...")
    arch = search_space.sample_architecture()
    complexity = search_space.estimate_complexity(arch)
    
    print(f"   • Layers: {len(arch['layers'])}")
    print(f"   • Parameters: ~{complexity.get('params', 1e6)/1e6:.1f}M")
    print(f"   • FLOPs: ~{complexity.get('flops', 1e9)/1e9:.1f}G")
    
    # 3. Setup NAS system
    print("\n🧠 Initializing Neural Architecture Search...")
    nas = NeuralArchitectureSearch(
        task='image_classification',
        dataset='cifar10',
        objectives=['accuracy', 'latency'],
        algorithm='evolutionary'
    )
    print("   ✅ NAS system ready")
    
    # 4. Generate code
    print("\n🛠️ Generating production code...")
    codegen = CodeGenerator(target_framework='pytorch')
    
    # Show sample generated code
    sample_code = '''
import torch
import torch.nn as nn

class AutoGeneratedNet(nn.Module):
    """Auto-generated neural network"""
    
    def __init__(self, num_classes=10):
        super().__init__()
        self.features = nn.Sequential(
            nn.Conv2d(3, 64, 3, padding=1),
            nn.ReLU(inplace=True),
            nn.Conv2d(64, 128, 3, padding=1),
            nn.ReLU(inplace=True),
            nn.AdaptiveAvgPool2d(1)
        )
        self.classifier = nn.Linear(128, num_classes)
        
    def forward(self, x):
        x = self.features(x)
        x = x.view(x.size(0), -1)
        return self.classifier(x)
'''
    
    print("   📄 Sample generated PyTorch code:")
    for line in sample_code.strip().split('\n'):
        print(f"      {line}")
    
    print("\n🎯 System Capabilities:")
    print("   • Multi-algorithm NAS (Evolutionary, DARTS, RL)")
    print("   • Hardware-aware optimization")
    print("   • Automatic code generation")
    print("   • Production-ready output")
    print("   • Comprehensive testing")
    
    print("\n" + "=" * 50)
    print("✨ AutoML-CodeGen: From Research to Production")
    print("   Built with passion by a self-taught developer")
    print("=" * 50)

if __name__ == "__main__":
    main() 