[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "nanonas"
version = "1.0.0"
description = "Professional Neural Architecture Search Platform - Research-Grade AutoML Framework"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "AutoML Research Team", email = "research@nanonas.ai"},
]
maintainers = [
    {name = "AutoML Research Team", email = "research@nanonas.ai"},
]
keywords = ["neural-architecture-search", "automl", "deep-learning", "pytorch", "research"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]
requires-python = ">=3.8"
dependencies = [
    "torch>=2.0.0",
    "torchvision>=0.15.0",
    "numpy>=1.21.0",
    "scipy>=1.7.0",
    "scikit-learn>=1.0.0",
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
    "plotly>=5.0.0",
    "dash>=2.0.0",
    "dash-cytoscape>=0.3.0",
    "pandas>=1.3.0",
    "pyyaml>=6.0",
    "tqdm>=4.62.0",
    "rich>=12.0.0",
    "typer>=0.7.0",
    "pydantic>=2.0.0",
    "hydra-core>=1.3.0",
    "wandb>=0.15.0",
    "tensorboard>=2.10.0",
    "optuna>=3.0.0",
    "ray[tune]>=2.0.0",
    "networkx>=2.8.0",
    "graphviz>=0.20.0",
    "pillow>=9.0.0",
    "requests>=2.28.0",
    "aiohttp>=3.8.0",
    "fastapi>=0.95.0",
    "uvicorn>=0.20.0",
    "redis>=4.5.0",
    "celery>=5.2.0",
    "docker>=6.0.0",
    "psutil>=5.9.0",
    "py-cpuinfo>=9.0.0",
    "gpustat>=1.1.0",
    "pymongo>=4.3.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.10.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "sphinx-autoapi>=2.0.0",
    "myst-parser>=1.0.0",
    "nbsphinx>=0.9.0",
    "jupyter>=1.0.0",
    "notebook>=6.5.0",
    "jupyterlab>=4.0.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocs-jupyter>=0.24.0",
    "mkdocs-gallery>=0.7.0",
    "mkdocstrings[python]>=0.20.0",
]
web = [
    "streamlit>=1.28.0",
    "gradio>=4.0.0",
    "bokeh>=3.0.0",
    "holoviews>=1.17.0",
    "panel>=1.3.0",
]
cloud = [
    "boto3>=1.26.0",
    "google-cloud-storage>=2.7.0",
    "azure-storage-blob>=12.14.0",
    "kubernetes>=26.0.0",
]
all = [
    "nanonas[dev,docs,web,cloud]",
]

[project.urls]
Homepage = "https://github.com/Ratz-innovator/AutoMl-CodeGen"
Documentation = "https://nanonas.readthedocs.io"
Repository = "https://github.com/Ratz-innovator/AutoMl-CodeGen"
"Bug Tracker" = "https://github.com/Ratz-innovator/AutoMl-CodeGen/issues"
Changelog = "https://github.com/Ratz-innovator/AutoMl-CodeGen/blob/main/CHANGELOG.md"

[project.scripts]
nanonas = "nanonas.cli:main"
nanonas-server = "nanonas.server:main"
nanonas-worker = "nanonas.worker:main"

[project.entry-points."nanonas.search_strategies"]
evolutionary = "nanonas.search.evolutionary:EvolutionarySearch"
darts = "nanonas.search.darts:DARTSSearch"
progressive_darts = "nanonas.search.progressive_darts:ProgressiveDARTSSearch"
pc_darts = "nanonas.search.pc_darts:PCDARTSSearch"
gdas = "nanonas.search.gdas:GDASSearch"
setn = "nanonas.search.setn:SETNSearch"
bayesian = "nanonas.search.bayesian_optimization:BayesianOptimizationSearch"
reinforcement = "nanonas.search.reinforcement:ReinforcementSearch"
multiobjective = "nanonas.search.multiobjective:MultiObjectiveSearch"
ensemble = "nanonas.search.ensemble:EnsembleSearch"

[tool.setuptools.packages.find]
include = ["nanonas*"]
exclude = ["tests*", "docs*", "examples*", "web*"]

[tool.setuptools.package-data]
nanonas = [
    "configs/*.yaml",
    "configs/*.json",
    "templates/*.py",
    "templates/*.yaml",
    "static/*",
    "web/build/**/*",
]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["nanonas"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "E501", "W503"]
exclude = [".git", "__pycache__", "build", "dist", ".eggs"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
strict_optional = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "torchvision.*",
    "matplotlib.*",
    "seaborn.*",
    "plotly.*",
    "dash.*",
    "wandb.*",
    "optuna.*",
    "ray.*",
    "networkx.*",
    "graphviz.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --cov=nanonas --cov-report=term-missing --cov-report=html"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "gpu: marks tests as requiring GPU",
    "distributed: marks tests as requiring multiple GPUs",
]

[tool.coverage.run]
source = ["nanonas"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 