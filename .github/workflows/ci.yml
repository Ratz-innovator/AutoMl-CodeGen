name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: "3.8"
  POETRY_VERSION: "1.6.1"

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install torch torchvision --index-url https://download.pytorch.org/whl/cpu
        pip install -e ".[dev]"
    
    - name: Lint with flake8
      run: |
        flake8 nanonas --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 nanonas --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Format check with black
      run: |
        black --check nanonas/ tests/
    
    - name: Type check with mypy
      run: |
        mypy nanonas/ --ignore-missing-imports
      continue-on-error: true
    
    - name: Test with pytest
      run: |
        python simple_test.py
        python test_package.py
        pytest tests/ -v --cov=nanonas --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}

    - name: Install dependencies
      run: poetry install --with dev

    - name: Run black
      run: poetry run black --check nanonas tests

    - name: Run isort
      run: poetry run isort --check-only nanonas tests

    - name: Run flake8
      run: poetry run flake8 nanonas tests

    - name: Run mypy
      run: poetry run mypy nanonas

    - name: Run bandit security check
      run: poetry run bandit -r nanonas -f json -o bandit-report.json

    - name: Upload bandit report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-report
        path: bandit-report.json

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}

    - name: Install dependencies
      run: poetry install --with docs

    - name: Build documentation
      run: |
        cd docs
        poetry run mkdocs build --strict

    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: docs/site/

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/nanonas:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/nanonas:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Run safety check
      run: |
        safety check
      continue-on-error: true
    
    - name: Run bandit security scan
      run: |
        bandit -r nanonas/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-results
        path: bandit-report.json

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, code-quality, docker]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Deploy to staging
      run: |
        echo "ðŸš€ Deploying to staging environment..."
        # Add deployment commands here
        # e.g., kubectl apply, terraform apply, etc.

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, code-quality, docker]
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "ðŸš€ Deploying to production environment..."
        # Add deployment commands here

    - name: Create deployment issue
      uses: actions/github-script@v6
      with:
        script: |
          const { data: release } = await github.rest.repos.getLatestRelease({
            owner: context.repo.owner,
            repo: context.repo.repo
          });
          
          const body = `## ðŸš€ Production Deployment
          
          **Version**: ${release.tag_name}
          **Release**: ${release.name}
          **Deployed**: ${new Date().toISOString()}
          
          ### Changes
          ${release.body}
          
          ### Verification
          - [ ] Health checks passing
          - [ ] Performance benchmarks within bounds
          - [ ] User acceptance testing complete
          `;
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Production Deployment: ${release.tag_name}`,
            body: body,
            labels: ['deployment', 'production']
          });

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, code-quality, docs, docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[release]')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}

    - name: Get version
      id: version
      run: |
        VERSION=$(poetry version --short)
        echo "version=v$VERSION" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: Release ${{ steps.version.outputs.version }}
        draft: false
        prerelease: false
        body: |
          ## ðŸŽ‰ nanoNAS Release ${{ steps.version.outputs.version }}
          
          ### ðŸš€ What's New
          - Enhanced search algorithms
          - Improved visualization
          - Performance optimizations
          - Bug fixes and stability improvements
          
          ### ðŸ“¦ Installation
          ```bash
          pip install nanonas==${{ steps.version.outputs.version }}
          ```
          
          ### ðŸ”— Links
          - [Documentation](https://nanonas.readthedocs.io)
          - [Docker Image](https://hub.docker.com/r/nanonas/nanonas)
          - [PyPI Package](https://pypi.org/project/nanonas)

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [test, code-quality]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}

    - name: Build package
      run: poetry build

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}

  notify:
    name: Notifications
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#nanonas-ci'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow

# =============================================================================
# Schedule for nightly builds
# =============================================================================

on:
  schedule:
    - cron: '0 2 * * *'  # Run at 2 AM UTC daily 

  performance:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install torch torchvision --index-url https://download.pytorch.org/whl/cpu
        pip install -e .
        pip install pytest-benchmark
    
    - name: Run performance benchmarks
      run: |
        python -c "
        import time
        from nanonas import nano_nas
        
        print('ðŸš€ Running performance benchmarks...')
        
        # Benchmark educational implementation
        start_time = time.time()
        model = nano_nas('evolution', population_size=5, generations=2)
        end_time = time.time()
        
        print(f'âœ… Evolutionary search: {end_time - start_time:.2f}s')
        
        # Benchmark DARTS
        start_time = time.time()
        model = nano_nas('darts', epochs=2)
        end_time = time.time()
        
        print(f'âœ… DARTS search: {end_time - start_time:.2f}s')
        "
    
    - name: Store benchmark results
      run: |
        echo "Performance benchmarks completed" > benchmark-results.txt
        
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark-results.txt 