name: 🔬 nanoNAS CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.9'
  PYTORCH_VERSION: '2.1.0'

jobs:
  # =============================================================================
  # Code Quality Checks
  # =============================================================================
  
  quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 mypy isort
        pip install -e ".[dev]"
        
    - name: 🎨 Check code formatting
      run: black --check --diff nanonas tests
      
    - name: 🔍 Lint code
      run: flake8 nanonas --max-line-length=100 --ignore=E203,W503
      
    - name: 📊 Type checking
      run: mypy nanonas --ignore-missing-imports
      
    - name: 🔄 Import sorting
      run: isort --check-only --diff nanonas tests

  # =============================================================================
  # Unit Tests
  # =============================================================================
  
  test:
    name: 🧪 Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
        
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        
    - name: 🧪 Run unit tests
      run: |
        pytest tests/unit -v --tb=short --cov=nanonas --cov-report=xml
        
    - name: 📊 Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.9'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # =============================================================================
  # Integration Tests
  # =============================================================================
  
  integration:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: [quality, test]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        
    - name: 🧪 Run integration tests
      run: |
        pytest tests/integration -v --tb=short
        
    - name: 🔍 Quick search test
      run: |
        python -m nanonas.api search --config nanonas/configs/experiment_configs.yaml --experiment dev_test

  # =============================================================================
  # GPU Tests (if GPU runners available)
  # =============================================================================
  
  gpu-test:
    name: 🎮 GPU Tests
    runs-on: [self-hosted, gpu]  # Requires self-hosted GPU runner
    if: false  # Disable until GPU runner is available
    needs: [test]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install torch torchvision --index-url https://download.pytorch.org/whl/cu118
        pip install -e ".[dev]"
        
    - name: 🧪 Run GPU tests
      run: |
        python -c "import torch; print(f'CUDA available: {torch.cuda.is_available()}')"
        pytest tests/ -v -k "gpu" --tb=short

  # =============================================================================
  # Documentation
  # =============================================================================
  
  docs:
    name: 📚 Documentation
    runs-on: ubuntu-latest
    needs: [quality]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install sphinx sphinx-rtd-theme
        
    - name: 📚 Build documentation
      run: |
        mkdir -p docs/_build
        # sphinx-build -b html docs docs/_build/html
        echo "Documentation build placeholder"
        
    - name: 🌐 Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/_build/html

  # =============================================================================
  # Docker Build
  # =============================================================================
  
  docker:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔑 Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}
        
    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: nanonas/nanonas
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          
    - name: 🔨 Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # =============================================================================
  # Release
  # =============================================================================
  
  release:
    name: 🚀 Release
    runs-on: ubuntu-latest
    needs: [quality, test, integration, docker]
    if: github.event_name == 'release'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: 🔨 Build package
      run: python -m build
      
    - name: 🚀 Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: twine upload dist/*
      
    - name: 📎 Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  # =============================================================================
  # Benchmark (Nightly)
  # =============================================================================
  
  benchmark:
    name: 📊 Benchmark
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        
    - name: 📊 Run benchmarks
      run: |
        python -m nanonas.api benchmark --config nanonas/configs/experiment_configs.yaml
        
    - name: 📈 Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: results/

# =============================================================================
# Schedule for nightly builds
# =============================================================================

on:
  schedule:
    - cron: '0 2 * * *'  # Run at 2 AM UTC daily 